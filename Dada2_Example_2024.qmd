---
title: "Dada2"
subtitle: "¿Cómo generar tablas de abundancias para bacterias y hongos desde datos de secuenciación?"
author: "Roberto Álvarez"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/DADA2_Logo_Text_noVer_640px.png
    css: styles.css
    footer: <https://benjjneb.github.io/dada2/tutorial.html>
resources:
  - demo.pdf
---

## Dada2

En este ejemplos seguiremos el tutorial de la siguiente página oficial

::: {style="text-align: center; margin-top: 1em"}
[Dada2 Tutorial](https://benjjneb.github.io/dada2/tutorial.html){preview-link="true" style="text-align: center"}
:::

Los datos, en formato fastq, se encuentran también, para su descarga, dicha página. Pero se pueden descargar de [acá](https://mothur.s3.us-east-2.amazonaws.com/wiki/miseqsopdata.zip).

## Cargar la biblioteca y los datos {auto-animate="true"}

-   Ponemos la ruta (*path*) hacia los datos
-   Verifcamos que estén ahí
-   Cargamos `dada2`

``` r
library(dada2)
path<-"01_Raw_Data/"
list.files(path)
```

#### Pregunta

-   ¿Qué deberías observar al ejecutar el último comando?

## Extraer los nombres de las muestras

Este paso dependerá de cómo están los nombres de tus archivos, ve cómo lo hacen con el ejemplo y **adapta** para los tuyos

``` r
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
```

#### Pregunta

-   ¿Qué contienen las variables: fnFS,fnRs?

## Verificar la calidad phred de los archivos {auto-animate="true"}

``` r
#Forward
pdf("03_Results/Quality_Forward.pdf",width=13,height = 8)
plotQualityProfile(fnFs[1:10])
dev.off()
```

::: footer
:::

## Verificar la calidad phred de los archivos en los dos sentidos {auto-animate="true"}

``` r
#Forward
pdf("03_Results/Quality_Forward.pdf",width=13,height = 8)
plotQualityProfile(fnFs[1:10])
dev.off()
#Reverse
pdf("03_Results/Quality_Reverse.pdf",width=13,height = 8)
plotQualityProfile(fnRs[1:10])
dev.off()
```

::: footer
:::

## Verificar la calidad phred de los archivos *reverse* y *forward* {auto-animate="true"}

``` r
#Forward
pdf("03_Results/Quality_Forward.pdf",width=13,height = 8)
plotQualityProfile(fnFs[1:10])
dev.off()
#Reverse
pdf("03_Results/Quality_Reverse.pdf",width=13,height = 8)
plotQualityProfile(fnRs[1:10])
dev.off()
```

#### Preguntas

-   ¿Qué observas, de forma genérica, sobre la calidad de las secuencias *forward* y *reverse* ?
-   ¿Qué significa los número 1:10 en la función `plotQualityProfile()`?

::: footer
:::

## Filtar y cortar

-   A partir de la calidad de nuestros datos se filtran y cortan las secuencias para quedar con calidad PHRED mayor de 30

-   Primero se generará una carpeta en donde se generarán las secuencias filtradas y recortadas

``` r
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
```

::: footer
:::

## Filtar por calidad

``` r
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
              maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
              compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
```

#### Pregunta

-   ¿Por qué se selecciona esta opción `truncLen=c(240,160)` ?
-   Compara los tamaños de los archvios originales con los filtrados. ¿Qué observas?

::: footer
:::

## Aprender de los errores

``` r
# Si tu máquina es muy lenta ya generé este objeto y solo cárgalo con 
# readRDS(file="03_Results/errF.RDS)
errF <- learnErrors(filtFs, multithread=TRUE)
#saveRDS(errF,file="03_Results/errF.RDS")
```

::: footer
:::

## Aprender de los errores *reverse*

``` r
# Si tu máquina es muy lenta ya generé este objeto y solo cárgalo con 
# readRDS(file="03_Results/errF.RDS)
errF <- learnErrors(filtFs, multithread=TRUE)
#saveRDS(errF,file="03_Results/errF.RDS")
# Si tu máquina es muy lenta ya generé este objeto y solo cárgalo con 
# readRDS(file="03_Results/errR.RDS)
errR <- learnErrors(filtRs, multithread=TRUE)
#saveRDS(errR,file="03_Results/errR.RDS")
```

::: footer
:::

## Graficar las tasas de error

``` r
png("03_Results/Errores_Forward.png")
plotErrors(errF, nominalQ=TRUE)
dev.off()

png("03_Results/Errores_Reverse.png")
plotErrors(errR, nominalQ=TRUE)
dev.off()
```

::: footer
:::

## Probabilidad de A2C

![ErroresForward](03_Results/Errores_Reverse.png)


::: footer
:::

## El algoritmo de inferencia

```r
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
```

::: footer
:::

## Mezclar ambos sentidos

```r
#| echo: true
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
#saveRDS(mergers, file="03_Results/mergers.RDS")
mergers
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
#saveRDS(seqtab, file="03_Results/seqtab.RDS")
seqtab
```

::: footer
:::


## Remover quimeras


```r
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
sum(seqtab.nochim)/sum(seqtab)
```
::: footer
:::

## Estadístico de cómo quedó la asignación

```r
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
```
::: footer
:::


## Asignación taxónomica
En esta parte se mapean las lecturas resultantes a una base de datos, en este caso SILVA para hacer la asignación.

Deben  descargar la versión más reciente disponible [Silva for Dada 2](https://benjjneb.github.io/dada2/training.html)

Esta parte **puede** ser computacionalmente pesada. Ya generé el objeto en 03_Results/taxa.RDS


```r
taxa <- assignTaxonomy(seqtab.nochim, "01_Raw_Data/silva_nr_v132_train_set.fa.gz", multithread=TRUE)
#saveRDS(taxa, file="03_Results/taxa.RDS")
#writeRDS(file="03_Results/taxa.RDS")
```

::: footer
:::

## Asignación taxónomica
En esta parte se mapean las lecturas resultantes a una base de datos, en este caso SILVA para hacer la asignación.

Deben  descargar la versión más reciente disponible [Silva for Dada 2](https://benjjneb.github.io/dada2/training.html)

Esta parte **puede** ser computacionalmente pesada. Ya generé el objeto en 03_Results/taxa.RDS


```r
taxa <- assignTaxonomy(seqtab.nochim, "01_Raw_Data/silva_nr_v132_train_set.fa.gz", multithread=TRUE)
#saveRDS(taxa, file="03_Results/taxa.RDS")
#writeRDS(file="03_Results/taxa.RDS")
taxa <- addSpecies(taxa, "01_Raw_Data/silva_species_assignment_v138.1.fa.gz")
saveRDS(taxa, file="03_Results/taxa.RDS")
#readRDS("03_Results/taxa.RDS")
``` 
::: footer
:::

## Objeto más simple

```r
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
```

::: footer
:::

## Opcional: obligar a llegar nivel de especie

La base de datos está [acá](http://www2.decipher.codes/Classification/TrainingSets/SILVA_SSU_r138_2019.RData)

```r
library(DECIPHER)
dna <- DNAStringSet(getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
load("01_Raw_Data/SILVA_SSU_r138_2019.RData") # CHANGE TO THE PATH OF YOUR TRAINING SET
ids <- IdTaxa(dna, trainingSet, strand="top", processors=NULL, verbose=FALSE) # use all processors
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species") # ranks of interest
# Convert the output object of class "Taxa" to a matrix analogous to the output from assignTaxonomy
taxid <- t(sapply(ids, function(x) {
  m <- match(ranks, x$rank)
  taxa <- x$taxon[m]
  taxa[startsWith(taxa, "unclassified_")] <- NA
  taxa
}))
colnames(taxid) <- ranks 
rownames(taxid) <- getSequences(seqtab.nochim)
```

::: footer
:::

##  Data Frame con los metadatos

Construimos un dataset con los metadatos de interés

```r
library(phyloseq)
library(Biostrings)
library(ggplot2)
theme_set(theme_bw())
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Early"
samdf$When[samdf$Day>100] <- "Late"
rownames(samdf) <- samples.out
```

::: footer
:::

## Phyloseq

```r
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), 
               sample_data(samdf), 
               tax_table(taxa))
ps <- prune_samples(sample_names(ps) != "Mock", ps) # Remove mock sample
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps
save(ps,file="03_Results/ps.RDS")
```
::: footer
:::

## Visualizar la diversidad

```r
jpeg("03_Results/Alfa_Diversity.jpeg")
plot_richness(ps, x="Day", measures=c("Shannon", "Simpson"), color="When")
dev.off()
```
![Alpha Diversity](03_Results/Alfa_Diversity.jpeg)

::: footer

:::

##  Diversidad beta

```r
# Transform data to proportions as appropriate for Bray-Curtis distances
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
jpeg("03_Results/NMDS.jpeg")
plot_ordination(ps.prop, ord.nmds.bray, color="When", title="Bray NMDS")
dev.off()
```
![Diversidad Beta](03_Results/NMDS.jpeg){width=300}


::: footer

:::


## Gráficos de barras apilados

```r
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
jpeg("03_Results/BarPlot.jpeg")
plot_bar(ps.top20, x="Day", fill="Family") + facet_wrap(~When, scales="free_x")
dev.off()
```
![Gráfico de barras](03_Results/BarPlot.jpeg)

::: footer
:::

